{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["center","rectangle","App","className","MapContainer","zoom","scrollWheelZoom","LayersControl","position","BaseLayer","checked","name","TileLayer","attribution","url","Overlay","Marker","Popup","LayerGroup","Circle","pathOptions","fillColor","radius","stroke","color","FeatureGroup","Rectangle","bounds","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sRAaMA,EAAS,EAAE,SAAU,WACrBC,EAAY,CAChB,CAAC,OAAQ,KACT,CAAC,MAAO,MAgEKC,MA7Df,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAACC,EAAA,EAAD,CAAcJ,OAAQA,EAAQK,KAAM,GAAIC,iBAAiB,EAAzD,SACE,eAACC,EAAA,EAAD,CAAeC,SAAS,WAAxB,UACE,cAACD,EAAA,EAAcE,UAAf,CAAyBC,SAAO,EAACC,KAAK,OAAtC,SACE,cAACC,EAAA,EAAD,CACEC,YAAY,6IACZC,IAAI,oGAGR,cAACP,EAAA,EAAcE,UAAf,CAAyBE,KAAK,8BAA9B,SACE,cAACC,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,0DAGR,cAACP,EAAA,EAAcQ,QAAf,CAAuBJ,KAAK,oBAA5B,SACE,cAACK,EAAA,EAAD,CAAQR,SAAUR,EAAlB,SACE,eAACiB,EAAA,EAAD,mCACuB,uBADvB,+BAKJ,cAACV,EAAA,EAAcQ,QAAf,CAAuBL,SAAO,EAACC,KAAK,2BAApC,SACE,eAACO,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACEnB,OAAQA,EACRoB,YAAa,CAAEC,UAAW,QAC1BC,OAAQ,MAEV,cAACH,EAAA,EAAD,CACEnB,OAAQA,EACRoB,YAAa,CAAEC,UAAW,OAC1BC,OAAQ,IACRC,QAAQ,IAEV,cAACL,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CACEnB,OAAQ,CAAC,OAAQ,KACjBoB,YAAa,CAAEI,MAAO,QAASH,UAAW,SAC1CC,OAAQ,aAKhB,cAACf,EAAA,EAAcQ,QAAf,CAAuBJ,KAAK,gBAA5B,SACE,eAACc,EAAA,EAAD,CAAcL,YAAa,CAAEI,MAAO,UAApC,UACE,cAACP,EAAA,EAAD,oCACA,cAACE,EAAA,EAAD,CAAQnB,OAAQ,CAAC,OAAQ,KAAOsB,OAAQ,MACxC,cAACI,EAAA,EAAD,CAAWC,OAAQ1B,mBC1DpB2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.bdf6d936.chunk.js","sourcesContent":["import {\n  MapContainer,\n  TileLayer,\n  Marker,\n  Popup,\n  LayersControl,\n  LayerGroup,\n  Circle,\n  FeatureGroup,\n  Rectangle,\n} from \"react-leaflet\";\nimport \"./App.css\";\n\nconst center = [-33.95774, 18.461224];\nconst rectangle = [\n  [51.49, -0.08],\n  [51.5, -0.06],\n];\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <MapContainer center={center} zoom={13} scrollWheelZoom={false}>\n          <LayersControl position=\"topright\">\n            <LayersControl.BaseLayer checked name=\"ESRI\">\n              <TileLayer\n                attribution=\"Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community\"\n                url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\n              />\n            </LayersControl.BaseLayer>\n            <LayersControl.BaseLayer name=\"OpenStreetMap.BlackAndWhite\">\n              <TileLayer\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png\"\n              />\n            </LayersControl.BaseLayer>\n            <LayersControl.Overlay name=\"Marker with popup\">\n              <Marker position={center}>\n                <Popup>\n                  A pretty CSS3 popup. <br /> Easily customizable.\n                </Popup>\n              </Marker>\n            </LayersControl.Overlay>\n            <LayersControl.Overlay checked name=\"Layer group with circles\">\n              <LayerGroup>\n                <Circle\n                  center={center}\n                  pathOptions={{ fillColor: \"blue\" }}\n                  radius={200}\n                />\n                <Circle\n                  center={center}\n                  pathOptions={{ fillColor: \"red\" }}\n                  radius={100}\n                  stroke={false}\n                />\n                <LayerGroup>\n                  <Circle\n                    center={[51.51, -0.08]}\n                    pathOptions={{ color: \"green\", fillColor: \"green\" }}\n                    radius={100}\n                  />\n                </LayerGroup>\n              </LayerGroup>\n            </LayersControl.Overlay>\n            <LayersControl.Overlay name=\"Feature group\">\n              <FeatureGroup pathOptions={{ color: \"purple\" }}>\n                <Popup>Popup in FeatureGroup</Popup>\n                <Circle center={[51.51, -0.06]} radius={200} />\n                <Rectangle bounds={rectangle} />\n              </FeatureGroup>\n            </LayersControl.Overlay>\n          </LayersControl>\n        </MapContainer>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}